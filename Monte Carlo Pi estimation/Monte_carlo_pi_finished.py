# -*- coding: utf-8 -*-
"""Monte_Carlo_pi_finished_best.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u-1zVSnMe_DwTD-QoPaDjJ17lcaJ8-y_
"""

import random as rd
import numpy as np
import matplotlib as mlp
import matplotlib.pyplot as plt
import matplotlib.patches as patch
import time
from math import pi
import cv2
import numpy as np
import glob
from numpy import linspace

import matplotlib
import matplotlib.pyplot as plt
import numpy as np

inside = 0
outside = 0
coords = []
error= []
N=100
start_time = time.time()

# ----Plotting the circle and the rectangle-------
x = np.linspace(0, 1, 200)
y = np.sqrt((0.5 ** 2) - ((x - 0.5) ** 2)) + 0.5  # Upper half of circle
neg_y = -np.sqrt(0.25 - ((x - 0.5) ** 2)) + 0.5  # Lower half of circle
fig, ax = plt.subplots(1,1)
ax.plot(x, y, 'blue')
ax.plot(x, neg_y, 'blue')
rect = patch.Rectangle((0, 0), 1, 1, linewidth=1, fill=False)
ax.add_patch(rect)
ax.axis('equal')
ax.axis('off')
# ---------Loop that creates each frame for animation--------
for i in range(1, N):
    x_rand = rd.random()  # Random x coordinate
    y_rand = rd.random()  # Random y coordinate
    if (x_rand - 0.5) ** 2 + (y_rand - 0.5) ** 2 < (1 / 4):  # If the (x,y) coordinate falls inside the circle
        ax.plot(x_rand, y_rand, 'go', markersize=1)
        inside += 1
    else:
        ax.plot(x_rand, y_rand, 'ko', markersize=1)
        outside += 1
        
    pi_mc = 4 * (inside / (inside + outside))
    ax.set_title("$\pi$ = " + str(format(pi_mc ,'.8f'))+" "+str(i))  # Show 7 decimal places of Pi

    error_iteration = pi-pi_mc
    error.append(error_iteration)
    
    
    if i < 10:  
        plt.savefig("000000" + str(i))
    if i >= 10 and i <100:
        plt.savefig("00000" + str(i))
    if i >= 100 and i < 1000:
        plt.savefig("0000"+ str(i))
    if i >= 1000 and i < 10000:
        plt.savefig("000"+ str(i))
    if i >= 10000 and i < 100000:
        plt.savefig("00"+ str(i))

img_array=[]
for filename in sorted(glob.glob('/content/*.png')):
    img = cv2.imread(filename)
    height, width, layers = img.shape
    size = (width,height)
    img_array.append(img)

out = cv2.VideoWriter('monte_carlo_30fps.mp4',cv2.VideoWriter_fourcc(*'DIVX'), 30, size)
 
for i in range(len(img_array)):
    out.write(img_array[i])
out.release()

#plotting error
for i in range(1,N):
    
  fig, ax = plt.subplots()
  ax.plot(linspace(0,i,i), error[0:i])

  ax.set(xlabel='Iteration', ylabel='error')
  ax.grid()

  if i < 10:  
        plt.savefig("000000" + str(i)+".jpg")
  if i >= 10 and i <100:
        plt.savefig("00000" + str(i)+".jpg")
  if i >= 100 and i < 1000:
        plt.savefig("0000"+ str(i)+".jpg")
  if i >= 1000 and i < 10000:
        plt.savefig("000"+ str(i)+".jpg")
  if i >= 10000 and i < 100000:
        plt.savefig("00"+ str(i)+".jpg")
  plt.close()

img_array=[]
for filename in sorted(glob.glob('/content/*.jpg')):
    img = cv2.imread(filename)
    height, width, layers = img.shape
    size = (width,height)
    img_array.append(img)

out = cv2.VideoWriter('monte_carlo_error_30fps.mp4',cv2.VideoWriter_fourcc(*'DIVX'), 30, size)
 
for i in range(len(img_array)):
    out.write(img_array[i])
out.release()

#delete png in folder
import os
#providing the path of the folder
#r = raw string literal
folder_path = (r'/content')
#using listdir() method to list the files of the folder
test = os.listdir(folder_path)
#taking a loop to remove all the images
#using ".png" extension to remove only png images
#using os.remove() method to remove the files
for images in test:
    if images.endswith(".png"):
        os.remove(os.path.join(folder_path, images))
for images in test:
    if images.endswith(".jpg"):
        os.remove(os.path.join(folder_path, images))

#combine videos

from moviepy.editor import VideoFileClip, clips_array, vfx
clip1 = VideoFileClip("monte_carlo_30fps.mp4")
clip2 = VideoFileClip("monte_carlo_error_30fps.mp4")
final_clip = clips_array([[clip1, clip2]])
final_clip.write_videofile("final.mp4")